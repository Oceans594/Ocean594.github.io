{"meta":{"title":"Mr.L Blogs","subtitle":"","description":"人生苦短，我用python","author":"Mr.L","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2015-08-03T06:19:29.000Z","updated":"2019-05-21T08:10:14.696Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2016-01-15T22:17:29.000Z","updated":"2019-05-21T08:09:59.896Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"关于我","date":"2015-08-03T06:19:29.000Z","updated":"2019-05-21T11:01:55.745Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"暂时没有我的信息，敬请关注 WeChat:QQ:"}],"posts":[{"title":"Django入门","slug":"Django入门","date":"2019-05-18T09:20:02.562Z","updated":"2019-05-21T11:12:34.973Z","comments":true,"path":"2019/05/18/Django入门/","link":"","permalink":"http://yoursite.com/2019/05/18/Django入门/","excerpt":"","text":"Django入门创建应用使用一个应用开发一个业务模块，这里创建一个图书信息的应用 python manage.py startapp bookinfo init.py是一个空文件，表示当前目录booktest可以当作一个- python包使用。 tests.py文件用于开发测试用例，在实际开发中会有专门的测试人员，这个事情不需要我们来做。 models.py文件跟数据库操作相关。 views.py文件跟接收浏览器请求，进行处理，返回页面相关。 admin.py文件跟网站的后台管理相关。 创建完成之后在settings.py的 INSTALLED_APPS中添加bookinfo的应用。 INSTALLED_APPS = [ ‘django.contrib.admin’, ‘django.contrib.auth’, ‘django.contrib.contenttypes’, ‘django.contrib.sessions’, ‘django.contrib.messages’, ‘django.contrib.staticfiles’, ‘bookinfo’,] 设计模型设计一个图书类模型类的定义在models.py中，继承自models.Model类。在创建是不需要定义主键，在表生成时django会为我们自动添加主键，并且自动增长。 from django.db import modelsclass BookInfo(models.Model): book_name = models.CharField(max_length=20) book_auther = models.CharField(max_length=20) book_pub_date = models.DateField() 设计完模型类之后进行数据迁移： python manage.py makemigrations python manage.py migrate 执行第一条语句之后再我们创建的应用里的migrations里会多一个0001_initial.py的迁移文件，打开后会看到django为我们自动添加了id列，并且自动增长。 执行第二条语句之后会将该迁移文件中的属性，在数据库中生成对应表，在mysql中使用以下语句查看表结构： desc bookinfo_bookinfo; 设计一个图书详情类步骤同图书类的创建 class BookDetail(models.Model): book_price = models.FloatField() book_auther = models.CharField(max_length=20) book_pages = models.IntegerField() 迁移文件 python manage.py makemigrations python manage.py migrate 数据表的增删改查 完成数据表的迁移之后，接下来对数据进行操作 python manage.py shell 首先导入bookinfo/modules中的类，新建图书对象 from datetime import datefrom booktest.models import BookInfo,BookDetailbook=BookInfo()book.book_name=”Django入门”book.book_pub_date=date(1991,1,31)book.save() 使用book.delete()删除对象使用BookInfo.objects.all()获取全部信息重新对类属性赋值即为修改 管理站点通常再Django项目中都需要进行后台管理，Django能够根据定义的模型类自动生成管理页面。首先创建一个超级用户 python manage.py createsuperuser 输入用户名，邮箱密码之后，创建成功。在后台中我们并没有注册模型，所以再admin.py中注册模型类。 from django.contrib import adminfrom bookinfo.models import BookInfo,BookDetail admin.site.register(BookInfo)admin.site.register(BookDetail) 启动django服务，登陆127.0.0.1：8000/admin进入后台管理 python manage.py runserver 启动后会发现，列表信息为BookInfo objects，需要点进去才能看到图书信息，这样不方便管理，所以我们自定义列表显示为我们的图书信息。 将admin.py更新为以下代码： from django.contrib import adminfrom django.contrib import adminfrom bookinfo.models import BookInfo,BookDetailclass BookInfoAdmin(admin.ModelAdmin): list_display = [‘id’,’book_name’,’book_pub_data’]class BookDetailAdmin(admin.ModelAdmin): list_display = [‘id’,’book_price’,’book_auther’,’book_pages’]admin.site.register(BookInfo, BookInfoAdmin)admin.site.register(BookDetail, BookDetailAdmin) 重启服务器，得到我们想要的结果。 视图及URL后台管理页面做好了，我就需要做公共访问的页面了，而刚才我们输入的127.0.0.1/admin/就是一个url请求，服务器收到这个请求之后会有一个处理，并返回。这个过程就是我们由视图来完成。 定义视图函数 视图函数被定义在views.py中，首先我们定义一个index，即首页。 from django.shortcuts import render from django.http import HttpResponse def index(request): return HttpResponse(“这是首页”) 配置URLs 请求者在浏览器中输入URL，向服务器发送请求，服务器会在编写好的URLconf中逐条匹配，如果匹配成功则返回对应的视图函数，若没有匹配成功，则返回404 Page Not Found。 首先我们在bookinfo下新建urls.py文件，定义一个列表，用来匹配views.py中的视图函数。 from django.urls import pathfrom bookinfo import viewsurlpatterns = [ path(‘’, views.index),] 打开项目文件夹中的urls.py文件,为urlpatters列表添加我们创建的urls。 ‘’’from django.contrib import adminfrom django.urls import pathfrom django.conf.urls import includeurlpatterns = [path(‘admin/‘, admin.site.urls),path(‘index/‘, include(‘bookinfo.urls’)),]’’’ 在浏览器中输入127.0.0.1/index/则显示“这是首页”。 注意 在Django2.0之后的版本中，默认不使用正则匹配URLS，如果想用正则进行匹配，则需要导入模块。 from django.urls import re_path 由re_path替换path即可。 模板当我们想要让我们的页面变得更加好看，我们就需要用到模板文件了。 创建模板 在项目文件夹中新建文件夹templates,创建一个与应用同名的文件夹，名为bookinfo。 设置模板路径 在settings.py文件中设置TEMPLATES的DIRS值。 ‘DIRS’: [os.path.join(BASE_DIR, ‘templates’)] 定义模板 打开templates/bookinfo，创建index.html文件 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;这是标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;图书列表&lt;/h2&gt; &lt;ul&gt; {% for book in books %} {{ book.book_name }}--删除 {% endfor %} &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; 添加删除功能 在views.py中添加delete函数 def delete(request, book_id): book = BookInfo.objects.get(id=book_id) book.delete() return redirect(‘/index’) 为了使用方便快捷，使用redirct重定向回首页。 在bookinfo的URL列表中添加delete函数 urlpatterns = [ path(&apos;index/&apos;, views.index), re_path(&apos;^delete(\\d+)$&apos;, views.delete), ] 重启服务器得到我们想要的结果。 注意 可能会遇到的问题 页面显示不出来，第一步看后台报错信息 编码问题/后台管理问题 后台报错 UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0xa6 in position 9737: ill 页面显示 A server error occurred. Please contact the administrator 在系统设置中，区域和语言-&gt;管理语言设置-&gt;更改系统区域设置-&gt;将使用Unicode UTF-8 提供全球语言支持 打钩 *使用windows系统做开发踩的大坑坑，所以搞开发还是Linux*","categories":[],"tags":[]},{"title":"Django配置","slug":"Django配置","date":"2019-05-18T09:20:02.531Z","updated":"2019-05-18T13:56:05.256Z","comments":true,"path":"2019/05/18/Django配置/","link":"","permalink":"http://yoursite.com/2019/05/18/Django配置/","excerpt":"","text":"Django 2.2 配置基于Windows10 Anaconda5.2.0 创建虚拟环境 专门为Django项目创建一个虚拟环境，避免与其他项目发生冲突。打开Anaconda Prompt，输入以下命令： ‘ conda create -n Django_env’ 完成创建之后输入： ‘ conda env list’ 来查看我们所有的环境，此时可以看到两个环境：base和我们新建的Django_env。 如果想要删除该环境，请使用： ‘ conda remove -n Django_env –all’ 安装Django 使用以下命令，激活该环境： activate Django_env 此时可以看到左边括号里显示工作环境为Django_env,然后安装Django（不加版本号默认为最新版本）： conda install django 或者指定版本号： conda install django==2.0 安装完成后使用以下命令来查看该环境下的所有Package： conda list 创建项目 进入想要创建项目的文件夹，执行创建项目命令： ‘’’ cd D:\\Django_code django-admin startproject Django_frame .’’’ 更改默认数据库为MySQL 在当前环境中安装pymysql包： ‘’’conda install pymysql conda list’’’ 在项目init.py中添加以下代码 ‘’’ import pymysql pymysql.install_as_MySQLdb()’’’ 更改settings.py中DATABASE项 ‘’’ DATABASES = { ‘default’: { ‘ENGINE’: ‘django.db.backends.mysql’, ‘NAME’: ‘django_db’, ‘USER’: ‘root’, ‘PASSWORD’: ‘your password’, ‘HOST’: ‘127.0.0.1’, ‘PORT’: ‘3306’, } }’’’ 数据迁移 ‘python manage.py makemigrations’ ‘python manage.py migrate’ 如果报KeyError：255 是因为数据库版本原因，更新你的pymysql包就可以解决： ‘pip install –upgrade pymysql’ 可能会遇到的问题如果安装的版本不是最新的Django 则使用pip更新以下Django版本即可 如果遇到Cannot open ‘D:\\xxxxxx\\xxxx\\xxx.pip-script.py’ 则是pip安装的问题 使用以下命令即可 ‘ pip install –upgrade pip’ ‘ easy_install pip’ 更新完django之后按照上面步骤重新创建项目，更改默认数据库之后，启动django可能会报以下错误 django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3. 找到Python安装路劲下的Python36-32\\Lib\\site-packages\\django\\db\\backends\\mysql\\base.py文件 将文件中的如下代码注释 if version &lt; (1, 3, 3): raise ImproperlyConfigured(“mysqlclient 1.3.3 or newer is required; you have %s” % Database.version) 再次运行可能会遇到 AttributeError: ‘str’ object has no attribute ‘decode’ 将该文件decode修改为encode即可 django显示中文以及更改为北京时间将settings.py中的 LANGUAGE_CODE = ‘en-us’ TIME_ZONE = ‘UTC’ 修改为 LANGUAGE_CODE = ‘zh-hans’ TIME_ZONE = ‘Asia/Shanghai’","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-05-18T08:26:18.349Z","updated":"2019-05-18T08:26:18.350Z","comments":true,"path":"2019/05/18/hello-world/","link":"","permalink":"http://yoursite.com/2019/05/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}