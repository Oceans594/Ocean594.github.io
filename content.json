{"meta":{"title":"Mr.L Blogs","subtitle":"","description":"人生苦短，我用python","author":"Mr.L","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2015-08-03T06:19:29.000Z","updated":"2019-07-22T06:55:39.535Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"Djang从入门到精通Python基础Markdown基本使用"},{"title":"标签","date":"2016-01-15T22:17:29.000Z","updated":"2019-07-22T06:36:48.611Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"PythonDjangoMarkdown"},{"title":"关于我","date":"2015-08-03T06:19:29.000Z","updated":"2019-05-21T11:28:55.986Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"暂时没有我的信息，敬请关注 WeChat: QQ:"}],"posts":[{"title":"Markdown基本语法","slug":"Markdown基本语法","date":"2019-07-22T06:38:00.000Z","updated":"2019-07-22T06:38:32.976Z","comments":true,"path":"2019/07/22/Markdown基本语法/","link":"","permalink":"http://yoursite.com/2019/07/22/Markdown基本语法/","excerpt":"","text":"markdown标题# 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 字体**这是加粗的文字** *这是倾斜的文字*` ***这是斜体加粗的文字*** ~~这是加删除线的文字~~ 引用&gt;这是引用的内容 &gt;&gt;这是引用的内容 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 代码单行&apos;code&apos; 代码块&apos;&apos;&apos;code block&apos;&apos;&apos; 表格表头|表头|表头 ---|:--:|---: 内容|内容|内容 内容|内容|内容 第二行分割表头和内容。 - 有一个就行，为了对齐，多加了几个 文字默认居左 -两边加：表示文字居中 -右边加：表示文字居右 注：原生的语法两边都要用 | 包起来。此处省略 超链接[超链接名](超链接地址 &quot;超链接title&quot;) title可加可不加 分割线--- ---- *** ***** 友情链接：https://blog.csdn.net/witnessai1/article/details/52551362","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"}],"author":"Mr.L"},{"title":"常用正则表达式","slug":"常用正则表达式-1","date":"2019-07-22T06:36:00.000Z","updated":"2019-07-22T06:37:27.829Z","comments":true,"path":"2019/07/22/常用正则表达式-1/","link":"","permalink":"http://yoursite.com/2019/07/22/常用正则表达式-1/","excerpt":"","text":"校验数字的表达式数字：^[0-9]*$ n位的数字：^\\d{n}$ 至少n位的数字：^\\d{n,}$ m-n位的数字：^\\d{m,n}$ 零和非零开头的数字：^(0|[1-9][0-9]*)$ 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$ 带1-2位小数的正数或负数：^(-)?\\d+(.\\d{1,2})$ 正数、负数、和小数：^(-|+)?\\d+(.\\d+)?$ 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$ 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$ 非零的正整数：^[1-9]\\d$ 或 ^([1-9][0-9]){1,3}$ 或 ^+?[1-9][0-9]*$ 非零的负整数：^-[1-9][]0-9”$ 或 ^-[1-9]\\d$ 非负整数：^\\d+$ 或 ^[1-9]\\d*|0$ 非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$ 非负浮点数：^\\d+(.\\d+)?$ 或 ^[1-9]\\d.\\d|0.\\d[1-9]\\d|0?.0+|0$ 非正浮点数：^((-\\d+(.\\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\\d.\\d|0.\\d[1-9]\\d))|0?.0+|0$ 正浮点数：^[1-9]\\d.\\d|0.\\d[1-9]\\d$ 或 ^(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9]))$ 负浮点数：^-([1-9]\\d.\\d|0.\\d[1-9]\\d)$ 或 ^(-(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9])))$ 浮点数：^(-?\\d+)(.\\d+)?$ 或 ^-?([1-9]\\d.\\d|0.\\d[1-9]\\d|0?.0+|0)$ 校验字符的表达式汉字：^[\\u4e00-\\u9fa5]{0,}$ 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$ 长度为3-20的所有字符：^.{3,20}$ 由26个英文字母组成的字符串：^[A-Za-z]+$ 由26个大写英文字母组成的字符串：^[A-Z]+$ 由26个小写英文字母组成的字符串：^[a-z]+$ 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$ 由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w{3,20}$ 中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$ 中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$ 可以输入含有^%&amp;’,;=?$\\”等字符：[^%&amp;’,;=?$\\x22]+ 禁止输入含有~的字符：[^~\\x22]+ 特殊需求表达式Email地址：^\\w+([-+.]\\w+)@\\w+([-.]\\w+).\\w+([-.]\\w+)*$ 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.? InternetURL：[a-zA-z]+://[^\\s] 或 ^http://([\\w-]+.)+[\\w-]+(/[\\w-./?%&amp;=])?$ 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$ 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$ 国内电话号码(0511-4405222、021-87888822)：\\d{3}-\\d{8}|\\d{4}-\\d{7} 电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: ((\\d{11})|^((\\d{7,8})|(\\d{4}|\\d{3})-(\\d{7,8})|(\\d{4}|\\d{3})-(\\d{7,8})-(\\d{4}|\\d{3}|\\d{2}|\\d{1})|(\\d{7,8})-(\\d{4}|\\d{3}|\\d{2}|\\d{1}))$) 身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$) 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w{5,17}$ 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.\\d)(?=.[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$ 强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：^(?=.\\d)(?=.[a-z])(?=.*[A-Z]).{8,10}$ 日期格式：^\\d{4}-\\d{1,2}-\\d{1,2}一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ 钱的输入格式： 有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$ 这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$ 这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$ 这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ 1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$ 备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$ 中文字符的正则表达式：[\\u4e00-\\u9fa5] 双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)) 空白行的正则表达式：\\n\\s*\\r (可以用来删除空白行) HTML标记的正则表达式：&lt;(\\S?)[^&gt;]&gt;.?|&lt;.? /&gt; ( 首尾空白字符的正则表达式：^\\s|\\s$或(^\\s)|(\\s$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式) 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始) 中国邮政编码：[1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字) IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)) 本文来自[菜鸟教程]","categories":[{"name":"Python基础","slug":"Python基础","permalink":"http://yoursite.com/categories/Python基础/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}],"author":"Mr.L"},{"title":"Django+Nginx+Uwsgi部署","slug":"ango-Nginx-Uwsgi部署","date":"2019-07-22T06:34:00.000Z","updated":"2019-07-22T06:37:52.616Z","comments":true,"path":"2019/07/22/ango-Nginx-Uwsgi部署/","link":"","permalink":"http://yoursite.com/2019/07/22/ango-Nginx-Uwsgi部署/","excerpt":"","text":"Django+Nginx+uWsgi 项目部署环境腾讯云：Ubuntu 18.04 64位 本机：windows10 Python：3.6.8 工具IDE： Pycharm SSH： Bitvise SSH Client 申请服务器这里使用腾讯云学生服务器，学生党你懂的。 使用Bitvise 连接服务器在login处，填写服务器IP，端口，用户名密码，测试连接。 Python环境腾讯云服务器会自带一个Python2.7和一个Python3.5，这里系统自带的Python我们将不会使用，由于Django项目环境最好使用虚拟环境，原因在这里有提到。 安装虚拟环境这里使用virtualenv sudo apt-get install virtualenv 创建虚拟环境 virtualenv -p /usr/bin/python3 py3env virtualenv -p /usr/bin/python py2env 由于Django版本为2.2.0，所以我们使用python3 source py3env/bin/activate 可以看到，命令行左边出现(py3env) 最近发现pyenv用来管理python版本，挺好用的，这里就不赘述了。 安装项目中所使用的数据库###这里用到的为Mysql数据库###第一步 sudo apt-get install mysql-server 执行过程中可能会让你输入【y/n】输入y，很多安装教程中提到，会让你输入密码，我在安装过程中并没有，所以后文会有更改密码教程。 第二步 sudo apt-get install mysql-client 第三步 sudo apt-get install libmysqlclient-dev 全部安装完成之后使用命令查看mysql是否安装成功 sudo netstat -tap | grep mysql 接下来打开数据库 mysql -uroot -p 由于安装过程中没有设置密码所以直接回车 mysql默认有一个密码检测，所以会报以下错 Access denied for user &apos;root&apos;@&apos;localhost&apos; () 这个问题出现原因有四： 1）mysql的服务器停止 2）用户的端口号或者IP导致 3）mysql的配置文件错误—-my.ini等文件 4）root用户的密码错误，未输入密码 所以我们的问题在于密码未键入。 ####解决方案：#### 在mysql安装目录下找到配置文件 skip-grant-tables# 跳过登陆检查 保存退出，重启mysql服务，再次登陆，直接回车，会进入mysql 在mysql中输入以下命令更改密码（mysql server5.6之后使用authentication_string代替了老版本的password） use mysql; update user set authentication_string=PASSWORD(&quot;这里输入你要改的密码&quot;) where User=&apos;root&apos;; #更改密码 update user set plugin=&quot;mysql_native_password&quot;; #如果没这一行可能也会报一个错误，因此需要运行这一行 flush privileges; #更新所有操作权限 exit; 操作完成，回到配置文件将skip-grant-tables注释掉，重新登陆，成功！ 安装项目所需的Python包pip为我们提供了一键导出导入 在本机项目目录中使用命令导出当前所需要的包 pip freeze &gt; list.txt 再将Django代码上传至服务器 进入服务器项目目录 pip install -r list.txt 安装所有需要的包 Django代码上传方式一使用Bitvise SSH，连接之后会自动弹出SFTP窗口，将Django项目由local files拖到remote files即可 方式二(推荐)使用Pycharm上传，Pycharm是python最强大的IDE（不接受反驳）。 使用Pycharm打开Django项目，菜单栏选中Tools-&gt;Deployment-&gt;configuration 新建SFTP服务 connection-&gt;输入IP，端口，选择项目目录，服务器用户名，密码，测试连接。 Mapping-&gt;项目目录，服务器目录-&gt;OK 右键项目文件夹-&gt;Deployment-&gt;upload/donwload 上传成功 同时在Depolyment中选中Automatic Upload（always）自动同步代码，就不需要在服务器更改代码了。 配置uWSGI以下内容来自这里 看这篇能够解决90%的问题，剩下的10%为我在部署中所遇到的问题，在本篇文章中会提到。 使用example.com代替服务器IP或者域名 将uWSGI安装到virtualenv中pip install uwsgi 在项目文件夹中新建config目录用于配置与测试 sudo mkdir config 创建test.py # test.py def application(env, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;,&apos;text/html&apos;)]) return [b&quot;Hello World&quot;] # python3 # return [&quot;Hello World&quot;] # python2 运行uWSGI uwsgi --http :8000 --wsgi-file test.py 选项意味着： http :8000：使用协议http，端口8000 wsgi-file test.py：加载指定的文件test.py 这应该直接向端口8000上的浏览器发送“hello world”消息。访问： http://example.com:8000 测试你的Django项目现在我们希望uWSGI做同样的事情，但是要运行Django站点而不是 test.py模块。 如果您还没有这样做，请确保您的mysite项目确实有效： python manage.py runserver 0.0.0.0:8000 如果可行，请使用uWSGI运行它： uwsgi --http :8000 --module mysite.wsgi module mysite.wsgi：加载指定的wsgi模块 将浏览器指向服务器; 如果该网站出现，则表示uWSGI能够从您的virtualenv为您的Django应用程序提供服务，现在通常我们不会让浏览器直接与uWSGI对话。这是网络服务器的工作，它将充当中间人。 在配置目录中新建mysite.ini,为项目配置uwsgi： [uwsgi] socket = 127.0.0.1:8000 chdir = /home/ubuntu/blog module = blog.wsgi master = true processes = 4 threads = 4 max-requests = 6000 daemonize = /home/ubuntu/blog/run.log 使用配置文件启动uwsgi： uwsgi --ini mysite.ini 可能会遇到端口占用的问题，netstat -ap | grep 8000查看占用端口，使用kill命令终止该进程即可。 Nginx配置安装nginx： sudo apt-get install nginx sudo /etc/init.d/nginx start 如果别的东西是已经服务的80端口，你想有使用nginx的，你就必须重新配置nginx的服务于不同的端口上。但是对于本教程，我们将使用端口8000。 为项目配置nginx将需要uwsgi_params文件，该文件位于uWSGI发行版的目录中，或者来自 https://github.com/nginx/nginx/blob/master/conf/uwsgi_params 将其复制到项目目录中。稍后我们将使用nginx引用它。 现在在项目目录中创建一个名为mysite_nginx.conf的文件，并将其放入其中： # mysite_nginx.conf # the upstream component nginx needs to connect to upstream django { # server unix:///path/to/your/mysite/mysite.sock; # for a file socket server 127.0.0.1:8001; # for a web port socket (we&apos;ll use this first) } # configuration of the server server { # the port your site will be served on listen 8000; # the domain name it will serve for server_name example.com; # substitute your machine&apos;s IP address or FQDN charset utf-8; # max upload size client_max_body_size 75M; # adjust to taste # Django media location /media { alias /path/to/your/mysite/media; # your Django project&apos;s media files - amend as required } location /static { alias /path/to/your/mysite/static; # your Django project&apos;s static files - amend as required } # Finally, send all non-media requests to the Django server. location / { uwsgi_pass django; include /path/to/your/mysite/uwsgi_params; # the uwsgi_params file you installed } } 这个conf文件告诉nginx从文件系统提供媒体和静态文件，以及处理需要Django干预的请求。 创建/etc/nginx/sites-enabled到此文件的符号链接，以便nginx可以看到它： sudo ln -s ~/path/to/your/mysite/mysite_nginx.conf /etc/nginx/sites-enabled/ ###部署静态文件 在运行nginx之前，您必须收集静态文件夹中的所有Django静态文件。首先你必须编辑mysite / settings.py添加： STATIC_ROOT = os.path.join(BASE_DIR, &quot;static&quot;) 然后执行收集命令 python manage.py collectstatic 重启nginx： sudo /etc/init.d/nginx restart 重启时可能会报错，会提示使用命令查看报错信息 Starting nginx (via systemctl): nginx.serviceJob for nginx.service failed because the control process exited with error code. See &quot;systemctl status nginx.service&quot; and &quot;journalctl -xe&quot; for details. （我遇到的错误）查看错误信息之后发现nginx socket端口被占用，更改配置文件中端口即可。 （可能遇到的错误）permission denied,权限问题-&gt;参考这篇 处理完报错信息之后，重启nginx和uwsgi服务，在本机输入example.com成功访问！！！","categories":[{"name":"Django从入门到精通","slug":"Django从入门到精通","permalink":"http://yoursite.com/categories/Django从入门到精通/"}],"tags":[{"name":"Django","slug":"Django","permalink":"http://yoursite.com/tags/Django/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}],"author":"Mr.L"},{"title":"Django入门","slug":"Django入门","date":"2019-06-02T03:19:00.000Z","updated":"2019-07-22T06:37:48.867Z","comments":true,"path":"2019/06/02/Django入门/","link":"","permalink":"http://yoursite.com/2019/06/02/Django入门/","excerpt":"","text":"Django入门创建应用使用一个应用开发一个业务模块，这里创建一个图书信息的应用 python manage.py startapp bookinfo init.py是一个空文件，表示当前目录booktest可以当作一个- python包使用。tests.py文件用于开发测试用例，在实际开发中会有专门的测试人员，这个事情不需要我们来做。models.py文件跟数据库操作相关。views.py文件跟接收浏览器请求，进行处理，返回页面相关。admin.py文件跟网站的后台管理相关。创建完成之后在settings.py的 INSTALLED_APPS中添加bookinfo的应用。 INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;bookinfo&apos;, 设计模型设计一个图书类模型类的定义在models.py中，继承自models.Model类。在创建是不需要定义主键，在表生成时django会为我们自动添加主键，并且自动增长。 from django.db import models class BookInfo(models.Model): book_name = models.CharField(max_length=20) book_auther = models.CharField(max_length=20) book_pub_date = models.DateField() 设计完模型类之后进行数据迁移： python manage.py makemigrations python manage.py migrate 执行第一条语句之后再我们创建的应用里的migrations里会多一个0001_initial.py的迁移文件，打开后会看到django为我们自动添加了id列，并且自动增长。 执行第二条语句之后会将该迁移文件中的属性，在数据库中生成对应表，在mysql中使用以下语句查看表结构： desc bookinfo_bookinfo; 设计一个图书详情类步骤同图书类的创建 class BookDetail(models.Model): book_price = models.FloatField() book_auther = models.CharField(max_length=20) book_pages = models.IntegerField() 迁移文件 python manage.py makemigrations python manage.py migrate 数据表的增删改查完成数据表的迁移之后，接下来对数据进行操作 python manage.py shell 首先导入bookinfo/modules中的类，新建图书对象 from datetime import date from booktest.models import BookInfo,BookDetail book=BookInfo() book.book_name=&quot;Django入门&quot; book.book_pub_date=date(1991,1,31) book.save() 使用book.delete()删除对象使用BookInfo.objects.all()获取全部信息重新对类属性赋值即为修改 管理站点通常再Django项目中都需要进行后台管理，Django能够根据定义的模型类自动生成管理页面。首先创建一个超级用户 python manage.py createsuperuser 输入用户名，邮箱密码之后，创建成功。在后台中我们并没有注册模型，所以再admin.py中注册模型类。 from django.contrib import admin from bookinfo.models import BookInfo,BookDetail admin.site.register(BookInfo) admin.site.register(BookDetail) 启动django服务，登陆127.0.0.1：8000/admin进入后台管理 python manage.py runserver 启动后会发现，列表信息为BookInfo objects，需要点进去才能看到图书信息，这样不方便管理，所以我们自定义列表显示为我们的图书信息。 将admin.py更新为以下代码： from django.contrib import admin from django.contrib import admin from bookinfo.models import BookInfo,BookDetail class BookInfoAdmin(admin.ModelAdmin): list_display = [&apos;id&apos;,&apos;book_name&apos;,&apos;book_pub_data&apos;] class BookDetailAdmin(admin.ModelAdmin): list_display = [&apos;id&apos;,&apos;book_price&apos;,&apos;book_auther&apos;,&apos;book_pages&apos;] admin.site.register(BookInfo, BookInfoAdmin) admin.site.register(BookDetail, BookDetailAdmin) 重启服务器，得到我们想要的结果。 视图及URL后台管理页面做好了，我就需要做公共访问的页面了，而刚才我们输入的http://127.0.0.1/admin/就是一个url请求，服务器收到这个请求之后会有一个处理，并返回。这个过程就是我们由视图来完成。 定义视图函数 视图函数被定义在views.py中，首先我们定义一个index，即首页。 from django.shortcuts import render from django.http import HttpResponse def index(request): return HttpResponse(&quot;这是首页&quot;) 配置URLs 请求者在浏览器中输入URL，向服务器发送请求，服务器会在编写好的URLconf中逐条匹配，如果匹配成功则返回对应的视图函数，若没有匹配成功，则返回404 Page Not Found。* 首先我们在bookinfo下新建urls.py文件，定义一个列表，用来匹配views.py中的视图函数。 from django.urls import path from bookinfo import views urlpatterns = [ path(&apos;&apos;, views.index), ] 打开项目文件夹中的urls.py文件,为urlpatters列表添加我们创建的urls。 from django.contrib import admin from django.urls import path from django.conf.urls import include urlpatterns = { path(&apos;admin/&apos;, admin.site.urls), path(&apos;index/&apos;, include(&apos;bookinfo.urls&apos;)) } 在浏览器中输入http://127.0.0.1/index/则显示“这是首页”。 注意 在Django2.0之后的版本中，默认不使用正则匹配URLS，如果想用正则进行匹配，则需要导入模块。 from django.urls import re_path 由re_path替换path即可。 模板当我们想要让我们的页面变得更加好看，我们就需要用到模板文件了。 创建模板 在项目文件夹中新建文件夹templates,创建一个与应用同名的文件夹，名为bookinfo。 设置模板路径 在settings.py文件中设置TEMPLATES的DIRS值。 &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)] 定义模板 打开templates/bookinfo，创建index.html文件 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;这是标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;图书列表&lt;/h2&gt; &lt;ul&gt; {% for book in books %} {{ book.book_name }}--删除 {% endfor %} &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; 添加删除功能 在views.py中添加delete函数 &gt;def delete(request, book_id): book = BookInfo.objects.get(id=book_id) book.delete() return redirect(&apos;/index&apos;) 为了使用方便快捷，使用redirct重定向回首页。 在bookinfo的URL列表中添加delete函数 urlpatterns = [ path(&apos;index/&apos;, views.index), re_path(&apos;^delete(\\d+)$&apos;, views.delete), ] 重启服务器得到我们想要的结果。 ###可能会遇到的问题### 页面显示不出来，第一步看后台报错信息 编码问题/后台管理问题 后台报错 UnicodeDecodeError: &apos;gbk&apos; codec can&apos;t decode byte 0xa6 in position 9737: ill 页面显示 A server error occurred. Please contact the administrator 在系统设置中，区域和语言-&gt;管理语言设置-&gt;更改系统区域设置-&gt;将使用Unicode UTF-8 提供全球语言支持 打钩 *使用windows系统做开发踩的大坑坑，所以搞开发还是Linux*","categories":[{"name":"Django从入门到精通","slug":"Django从入门到精通","permalink":"http://yoursite.com/categories/Django从入门到精通/"}],"tags":[{"name":"Django","slug":"Django","permalink":"http://yoursite.com/tags/Django/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}],"author":"Mr.L"},{"title":"Django配置","slug":"Django配置","date":"2019-05-18T09:20:00.000Z","updated":"2019-07-22T06:37:54.441Z","comments":true,"path":"2019/05/18/Django配置/","link":"","permalink":"http://yoursite.com/2019/05/18/Django配置/","excerpt":"","text":"Django 2.2 配置基于Windows10 Anaconda5.2.0创建虚拟环境专门为Django项目创建一个虚拟环境，避免与其他项目发生冲突。打开Anaconda Prompt，输入以下命令：### python conda create -n Django_env 完成创建之后输入：### conda env list 来查看我们所有的环境，此时可以看到两个环境：base和我们新建的Django_env。 如果想要删除该环境，请使用：### conda remove -n Django_env --all 安装Django使用以下命令，激活该环境： activate Django_env 此时可以看到左边括号里显示工作环境为Django_env,然后安装Django（不加版本号默认为最新版本）：### conda install django 或者指定版本号： conda install django==2.0 安装完成后使用以下命令来查看该环境下的所有Package： conda list 创建项目 进入想要创建项目的文件夹，执行创建项目命令： cd D:/Django_code django-admin startproject Django_frame . 更改默认数据库为MySQL在当前环境中安装pymysql包： conda install pymysql conda list 在项目init.py中添加以下代码 import pymysql pymysql.install_as_MySQLdb() 更改settings.py中DATABASE项 DATABASES = { &apos;default&apos;: { &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;django_db&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;your password&apos;, &apos;HOST&apos;: &apos;127.0.0.1&apos;, &apos;PORT&apos;: &apos;3306&apos;, } } 数据迁移 python manage.py makemigrations python manage.py migrate 如果报KeyError：255 是因为数据库版本原因，更新你的pymysql包就可以解决： pip install --upgrade pymysql 可能会遇到的问题如果安装的版本不是最新的Django则使用pip更新下Django版本即可* 如果遇到Cannot open ‘D:\\xxxxxx\\xxxx\\xxx.pip-script.py’则是pip安装的问题* 使用以下命令即可 pip install --upgrade pip easy_install pip 更新完django之后按照上面步骤重新创建项目，更改默认数据库之后，启动django可能会报以下错误 django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3. 找到Python安装路劲下的Python36-32\\Lib\\site-packages\\django\\db\\backends\\mysql\\base.py文件 将文件中的如下代码注释 if version &lt; (1, 3, 3): raise ImproperlyConfigured(&quot;mysqlclient 1.3.3 or newer is required; you have %s&quot; % Database.__version__) 再次运行可能会遇到 AttributeError: &apos;str&apos; object has no attribute &apos;decode&apos; 将该文件decode修改为encode即可 django显示中文以及更改为北京时间将settings.py中的 LANGUAGE_CODE = &apos;en-us&apos; TIME_ZONE = &apos;UTC&apos; 修改为 LANGUAGE_CODE = &apos;zh-hans&apos; TIME_ZONE = &apos;Asia/Shanghai&apos;","categories":[{"name":"Django从入门到精通","slug":"Django从入门到精通","permalink":"http://yoursite.com/categories/Django从入门到精通/"}],"tags":[{"name":"Django","slug":"Django","permalink":"http://yoursite.com/tags/Django/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}],"author":"Mr.L"}]}